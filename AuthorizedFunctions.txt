readline		->	char *readline (const char *prompt);										https://tiswww.case.edu/php/chet/readline/readline.html#SEC35
					The function readline() prints a prompt prompt and then reads and returns a single line of text from the user. 
					If prompt is NULL or the empty string, no prompt is displayed. The line readline returns is allocated with malloc(); 
					the caller should free() the line when it has finished with it. The declaration for readline in ANSI C is

rl_clear_history->	void rl_clear_history (void)	
					Clear the history list by deleting all of the entries, in the same manner as the History library's clear_history() function.
					This differs from clear_history because it frees private data Readline saves in the history list.
rl_on_new_line	->	int rl_on_new_line (void)		
					Tell the update functions that we have moved onto a new (empty) line, usually after outputting a newline.

rl_replace_line	->	void rl_replace_line (const char *text, int clear_undo)
					Replace the contents of rl_line_buffer with text. The point and mark are preserved, if possible. 
					If clear_undo is non-zero, the undo list associated with the current line is cleared.

rl_redisplay	->	void rl_redisplay (void)
					Change what's displayed on the screen to reflect the current contents of rl_line_buffer.

add_history		->	void add_history (const char *string)
					Place string at the end of the history list. The associated data field (if any) is set to NULL. 
					If the maximum number of history entries has been set using stifle_history(),
					and the new number of history entries would exceed that maximum, the oldest history entry is removed.
_____________________________________________________________________________________________________________________________________________________________________________
printf			->
_____________________________________________________________________________________________________________________________________________________________________________
malloc			->
free			->	
_____________________________________________________________________________________________________________________________________________________________________________
write			->	ssize_t write(int fd, const void *buf, size_t count);						https://man7.org/linux/man-pages/man2/write.2.html
					write() writes up to count bytes from the buffer starting at buf to the file referred to by the file descriptor fd.
access			->	int access(const char *pathname, int mode);									https://man7.org/linux/man-pages/man2/access.2.html
					access() checks whether the calling process can access the file pathname.  If pathname is a symbolic link, it is dereferenced.
open			->	int open(const char *pathname, int flags, mode_t mode);						https://man7.org/linux/man-pages/man2/open.2.html
					The open() system call opens the file specified by pathname. 
					If the specified file does not exist, it may optionally (if O_CREAT is specified in flags) be created by open().
read			->	ssize_t read(int fd, void *buf, size_t count);								https://man7.org/linux/man-pages/man2/read.2.html
					read() attempts to read up to count bytes from file descriptor fd into the buffer starting at buf.
close			->	int close(int fd);															https://man7.org/linux/man-pages/man2/close.2.html
					close() closes a file descriptor, so that it no longer refers to any file and may be reused.
_____________________________________________________________________________________________________________________________________________________________________________
fork			->	pid_t fork(void);															https://man7.org/linux/man-pages/man2/fork.2.html
					fork() creates a new process by duplicating the calling process. The new process is referred to as the child process.
					The calling process is referred to as the parent process.
wait			->	pid_t wait(int *wstatus);													https://man7.org/linux/man-pages/man2/wait.2.html
waitpid			->	pid_t waitpid(pid_t pid, int *wstatus, int options);
					All of these system calls are used to wait for state changes in a
      				child of the calling process, and obtain information about the
       				child whose state has changed.
wait3			->	These functions are obsolete; use waitpid.
wait4			->	These functions are obsolete; use waitpid.
signal			->	sighandler_t signal(int signum, sighandler_t handler);						https://man7.org/linux/man-pages/man2/signal.2.html
					signal() sets the disposition of the signal signum to handler, which is either SIG_IGN, SIG_DFL, or the address of a programmer-defined function (a "signal handler").
sigaction		->	int sigaction(int signum, const struct sigaction *restrict act, struct sigaction *restrict oldact);	https://man7.org/linux/man-pages/man2/sigaction.2.html
					The sigaction() system call is used to change the action taken by a process on receipt of a specific signal.
kill			->	int kill(pid_t pid, int sig);												https://man7.org/linux/man-pages/man2/kill.2.html
					The kill() system call can be used to send any signal to any process group or process.
exit			->	noreturn void exit(int status);												https://man7.org/linux/man-pages/man3/exit.3.html
					The exit() function causes normal process termination and the least significant byte of status (i.e., status & 0xFF) is returned to the parent
_____________________________________________________________________________________________________________________________________________________________________________
getcwd			->	char *getcwd(char *buf, size_t size);										https://man7.org/linux/man-pages/man3/getcwd.3.html
					The getcwd() function copies an absolute pathname of the current
       				working directory to the array pointed to by buf, which is of
       				length size.

chdir			->	int chdir(const char *path);
					chdir() changes the current working directory of the calling process to the directory specified in path.
					On success, zero is returned.  On error, -1 is returned, and errno is set to indicate the error.
_____________________________________________________________________________________________________________________________________________________________________________
stat			->	int stat(const char *path, struct stat *buf);								https://linux.die.net/man/2/stat
					stat() stats the file pointed to by path and fills in buf.

lstat			->	int lstat(const char *path, struct stat *buf);
					lstat() is identical to stat(), except that if path is a symbolic link, then the link itself is stat-ed, not the file that it refers to.

fstat			->	int fstat(int fd, struct stat *buf);
					fstat() is identical to stat(), except that the file to be stat-ed is specified by the file descriptor fd.
_____________________________________________________________________________________________________________________________________________________________________________
unlink			->	int unlink(const char *pathname);											https://linux.die.net/man/2/unlink
					unlink() deletes a name from the file system.
					If that name was the last link to a file and no processes have the file open the file is deleted and the space it was using is made available for reuse.
					On success, zero is returned. On error, -1 is returned, and errno is set appropriately.
_____________________________________________________________________________________________________________________________________________________________________________
execve			->	int execve(const char *pathname, char *const argv[],char *const envp[]);	https://man7.org/linux/man-pages/man2/execve.2.html
					execve() executes the program referred to by pathname.  This causes the program that is currently being run by the calling
       				process to be replaced with a new program, with newly initialized stack, heap, and (initialized and uninitialized) data segments.
_____________________________________________________________________________________________________________________________________________________________________________
dup				->	int dup(int oldfd);															https://man7.org/linux/man-pages/man2/dup.2.html
					The dup() system call allocates a new file descriptor that refers to the same open file description as the descriptor oldfd.
					The new file descriptor number is guaranteed to be the lowest-numbered file descriptor that was unused in the calling process.
					
dup2			->	int dup2(int oldfd, int newfd);
					The dup2() system call performs the same task as dup(), but instead of using the lowest-numbered unused file descriptor, it
	       			uses the file descriptor number specified in newfd.  In other words, the file descriptor newfd is adjusted so that it now
	       			refers to the same open file description as oldfd.
	       			If the file descriptor newfd was previously open, it is closed before being reused; the close is performed silently (i.e., any
	       			errors during the close are not reported by dup2())
_____________________________________________________________________________________________________________________________________________________________________________
pipe			->	int pipe(int pipefd[2]);													https://man7.org/linux/man-pages/man2/pipe.2.html
					pipe() creates a pipe, a unidirectional data channel that can be used for interprocess communication.
					The array pipefd is used to return two file descriptors referring to the ends of the pipe. 
				   	pipefd[0] refers to the read end of the pipe.  pipefd[1] refers to the write end of the pipe.
				   	Data written to the write end of the pipe is buffered by the kernel until it is read from the read end of the pipe.
_____________________________________________________________________________________________________________________________________________________________________________
opendir			->	DIR *opendir(const char *name);												https://man7.org/linux/man-pages/man3/opendir.3.html
					The opendir() function opens a directory stream corresponding to the directory name, and returns a pointer to the directory stream.
					The stream is positioned at the first entry in the directory.
					The opendir() functions return a pointer to the directory stream.  On error, NULL is returned, and errno is set to indicate the error

readdir			->	struct dirent *readdir(DIR *dirp);											https://man7.org/linux/man-pages/man3/readdir.3.html
					The readdir() function returns a pointer to a dirent structure representing the next directory entry in the directory stream pointed to by dirp.
					It returns NULL on reaching the end of the directory stream or if an error occurred.
					On success, readdir() returns a pointer to a dirent structure. If the end of the directory stream is reached, NULL is returned and errno is not changed.

closedir		->	int closedir(DIR *dirp);													https://man7.org/linux/man-pages/man3/closedir.3.html
					The closedir() function closes the directory stream associated with dirp.
					A successful call to closedir() also closes the underlying file descriptor associated with dirp.
					The directory stream descriptor dirp is not available after this call.
_____________________________________________________________________________________________________________________________________________________________________________
strerror		->	char *strerror(int errnum);													https://man7.org/linux/man-pages/man3/strerror.3.html
					The strerror() function returns a pointer to a string that describes the error code passed in the argument errnum,
					possibly using the LC_MESSAGES part of the current locale to select the appropriate language.
					(For example, if errnum is EINVAL, the returned description will be "Invalid argument".)
perror			->	void perror(const char *s);													https://man7.org/linux/man-pages/man3/sys_nerr.3.html
					The perror() function produces a message on standard error describing the last error encountered during a call to a system or library function.
_____________________________________________________________________________________________________________________________________________________________________________
isatty			->	int isatty(int fd);															https://man7.org/linux/man-pages/man3/isatty.3.html
					The isatty() function tests whether fd is an open file descriptor referring to a terminal.
					isatty() returns 1 if fd is an open file descriptor referring to a terminal; otherwise 0 is returned, and errno is set to indicate the error.
_____________________________________________________________________________________________________________________________________________________________________________
ttyname			->	char *ttyname(int fd);														https://man7.org/linux/man-pages/man3/ttyname.3.html
					The function ttyname() returns a pointer to the null-terminated pathname of the terminal device that is open on the file
					descriptor fd, or NULL on error (for example, if fd is not connected to a terminal).  The return value may point to static
					data, possibly overwritten by the next call.  The function ttyname_r() stores this pathname in the buffer buf of length buflen.
_____________________________________________________________________________________________________________________________________________________________________________
ttyslot			->	int ttyslot(void);															https://man7.org/linux/man-pages/man3/ttyslot.3.html
					ttyslot() returns the index of the current user's entry in some file.
_____________________________________________________________________________________________________________________________________________________________________________
ioctl			->	int ioctl(int fd, unsigned long request, ...);								https://man7.org/linux/man-pages/man2/ioctl.2.html
					The ioctl() system call manipulates the underlying device parameters of special files.
					In particular, many operating characteristics of character special files (e.g., terminals) may be controlled with ioctl() requests.
					The argument fd must be an open file descriptor.
_____________________________________________________________________________________________________________________________________________________________________________
getenv			->	char *getenv(const char *name);												https://man7.org/linux/man-pages/man3/getenv.3.html
					The getenv() function searches the environment list to find the environment variable name, and returns a pointer to the corresponding value string.
					The getenv() function returns a pointer to the value in the environment, or NULL if there is no match.
_____________________________________________________________________________________________________________________________________________________________________________
tcsetattr		->	int tcsetattr(int fd,int optional_actions,const struct termios *termios_p);	https://linux.die.net/man/3/tcsetattr

tcgetattr
tgetent
tgetflag
tgetnum
tgetstr
tgoto
tputs